version: '3.3'
services:

  flask1:
    build:
      context: app1/
      dockerfile: app1.Dockerfile
    container_name: flask1
    restart: unless-stopped
    ports:
      - 5000:5000
    environment:
      REDIS_PORT: 6379
      APP_ENV: "prod"
      APP_DEBUG: "True"
      APP_PORT: 5000
      MONGODB_DATABASE: "flaskdb"
      MONGODB_USERNAME: "admin"
      MONGODB_PASSWORD: "admin"
      MONGODB_HOSTNAME: "mongodb"
      REDIS_CHANNEL: "mongo"
    volumes:
      - appdata:/app1/
    depends_on:
      - mongodb
      - redis
    networks:
      - frontend
      - backend

  flask2:
    build:
      context: app2/
      dockerfile: app2.Dockerfile
    container_name: flask2
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      REDIS_PORT: 6379
      APP2_ENV: "prod"
      APP2_DEBUG: "True"
      APP2_PORT: 8080
    volumes:
      - appdata:/app2/
    depends_on:
      - mongodb
      - redis
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: flaskdb
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
    ports:
      - 27017:27017
    networks:
      - backend
  
  redis:
      image: redis
      ports:
      - 6379:6379
      networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local